// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/accounty.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on AccoutingEmployeeLink with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AccoutingEmployeeLink) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AppointyId

	// no validation rules for ExternalId

	// no validation rules for AppType

	// no validation rules for Metadata

	return nil
}

// AccoutingEmployeeLinkValidationError is the validation error returned by
// AccoutingEmployeeLink.Validate if the designated constraints aren't met.
type AccoutingEmployeeLinkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccoutingEmployeeLinkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccoutingEmployeeLinkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccoutingEmployeeLinkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccoutingEmployeeLinkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccoutingEmployeeLinkValidationError) ErrorName() string {
	return "AccoutingEmployeeLinkValidationError"
}

// Error satisfies the builtin error interface
func (e AccoutingEmployeeLinkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccoutingEmployeeLink.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccoutingEmployeeLinkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccoutingEmployeeLinkValidationError{}

// Validate checks the field values on CreateEmployeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEmployeeRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	if v, ok := interface{}(m.GetEmployee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEmployeeRequestValidationError{
				field:  "Employee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AppType

	return nil
}

// CreateEmployeeRequestValidationError is the validation error returned by
// CreateEmployeeRequest.Validate if the designated constraints aren't met.
type CreateEmployeeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEmployeeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEmployeeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEmployeeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEmployeeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEmployeeRequestValidationError) ErrorName() string {
	return "CreateEmployeeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEmployeeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEmployeeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEmployeeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEmployeeRequestValidationError{}

// Validate checks the field values on DeleteEmployeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteEmployeeRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for AppointyEmployeeId

	// no validation rules for AppType

	return nil
}

// DeleteEmployeeRequestValidationError is the validation error returned by
// DeleteEmployeeRequest.Validate if the designated constraints aren't met.
type DeleteEmployeeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEmployeeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEmployeeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEmployeeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEmployeeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEmployeeRequestValidationError) ErrorName() string {
	return "DeleteEmployeeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEmployeeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEmployeeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEmployeeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEmployeeRequestValidationError{}

// Validate checks the field values on CreateBusinessHourRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateBusinessHourRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	if v, ok := interface{}(m.GetBusinessHour()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessHourRequestValidationError{
				field:  "BusinessHour",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AppType

	return nil
}

// CreateBusinessHourRequestValidationError is the validation error returned by
// CreateBusinessHourRequest.Validate if the designated constraints aren't met.
type CreateBusinessHourRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessHourRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessHourRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessHourRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessHourRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessHourRequestValidationError) ErrorName() string {
	return "CreateBusinessHourRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessHourRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessHourRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessHourRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessHourRequestValidationError{}

// Validate checks the field values on DeleteBusinessHourRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteBusinessHourRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for AppointyEmployeeId

	// no validation rules for AppType

	return nil
}

// DeleteBusinessHourRequestValidationError is the validation error returned by
// DeleteBusinessHourRequest.Validate if the designated constraints aren't met.
type DeleteBusinessHourRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessHourRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessHourRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessHourRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessHourRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessHourRequestValidationError) ErrorName() string {
	return "DeleteBusinessHourRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessHourRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessHourRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessHourRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessHourRequestValidationError{}

// Validate checks the field values on CreatePrepaidAppointmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePrepaidAppointmentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	if v, ok := interface{}(m.GetPrepaidAppointment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePrepaidAppointmentRequestValidationError{
				field:  "PrepaidAppointment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreatePrepaidAppointmentRequestValidationError is the validation error
// returned by CreatePrepaidAppointmentRequest.Validate if the designated
// constraints aren't met.
type CreatePrepaidAppointmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePrepaidAppointmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePrepaidAppointmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePrepaidAppointmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePrepaidAppointmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePrepaidAppointmentRequestValidationError) ErrorName() string {
	return "CreatePrepaidAppointmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePrepaidAppointmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePrepaidAppointmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePrepaidAppointmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePrepaidAppointmentRequestValidationError{}

// Validate checks the field values on CancelNRefPrepaidAppointmentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *CancelNRefPrepaidAppointmentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	if v, ok := interface{}(m.GetPrepaidAppointment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CancelNRefPrepaidAppointmentRequestValidationError{
				field:  "PrepaidAppointment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CancelNRefPrepaidAppointmentRequestValidationError is the validation error
// returned by CancelNRefPrepaidAppointmentRequest.Validate if the designated
// constraints aren't met.
type CancelNRefPrepaidAppointmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelNRefPrepaidAppointmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelNRefPrepaidAppointmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelNRefPrepaidAppointmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelNRefPrepaidAppointmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelNRefPrepaidAppointmentRequestValidationError) ErrorName() string {
	return "CancelNRefPrepaidAppointmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelNRefPrepaidAppointmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelNRefPrepaidAppointmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelNRefPrepaidAppointmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelNRefPrepaidAppointmentRequestValidationError{}

// Validate checks the field values on CreateCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCustomerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	if v, ok := interface{}(m.GetCustomer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCustomerRequestValidationError{
				field:  "Customer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AppType

	return nil
}

// CreateCustomerRequestValidationError is the validation error returned by
// CreateCustomerRequest.Validate if the designated constraints aren't met.
type CreateCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCustomerRequestValidationError) ErrorName() string {
	return "CreateCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCustomerRequestValidationError{}

// Validate checks the field values on RemoveCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveCustomerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	if v, ok := interface{}(m.GetCustomer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveCustomerRequestValidationError{
				field:  "Customer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveCustomerRequestValidationError is the validation error returned by
// RemoveCustomerRequest.Validate if the designated constraints aren't met.
type RemoveCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCustomerRequestValidationError) ErrorName() string {
	return "RemoveCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCustomerRequestValidationError{}

// Validate checks the field values on UpdateCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCustomerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	if v, ok := interface{}(m.GetCustomer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCustomerRequestValidationError{
				field:  "Customer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateCustomerRequestValidationError is the validation error returned by
// UpdateCustomerRequest.Validate if the designated constraints aren't met.
type UpdateCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomerRequestValidationError) ErrorName() string {
	return "UpdateCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomerRequestValidationError{}

// Validate checks the field values on CreateInventoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateInventoryRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyID

	if v, ok := interface{}(m.GetInventory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInventoryRequestValidationError{
				field:  "Inventory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AppType

	return nil
}

// CreateInventoryRequestValidationError is the validation error returned by
// CreateInventoryRequest.Validate if the designated constraints aren't met.
type CreateInventoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInventoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInventoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInventoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInventoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInventoryRequestValidationError) ErrorName() string {
	return "CreateInventoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInventoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInventoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInventoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInventoryRequestValidationError{}

// Validate checks the field values on Employee with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Employee) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AppointyId

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Email

	// no validation rules for ProfileImage

	// no validation rules for Gender

	// no validation rules for EmployeeNumber

	// no validation rules for PhoneNumber

	// no validation rules for Department

	// no validation rules for Designation

	// no validation rules for Metadata

	if v, ok := interface{}(m.GetHireDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EmployeeValidationError{
				field:  "HireDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EmployeeValidationError is the validation error returned by
// Employee.Validate if the designated constraints aren't met.
type EmployeeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmployeeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmployeeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmployeeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmployeeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmployeeValidationError) ErrorName() string { return "EmployeeValidationError" }

// Error satisfies the builtin error interface
func (e EmployeeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmployee.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmployeeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmployeeValidationError{}

// Validate checks the field values on BusinessHour with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BusinessHour) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AppointyEmployeeId

	// no validation rules for EmployeeId

	if v, ok := interface{}(m.GetCreateDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessHourValidationError{
				field:  "CreateDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for TotalTime

	return nil
}

// BusinessHourValidationError is the validation error returned by
// BusinessHour.Validate if the designated constraints aren't met.
type BusinessHourValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessHourValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessHourValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessHourValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessHourValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessHourValidationError) ErrorName() string { return "BusinessHourValidationError" }

// Error satisfies the builtin error interface
func (e BusinessHourValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessHour.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessHourValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessHourValidationError{}

// Validate checks the field values on PrepaidAppointment with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PrepaidAppointment) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AppointyId

	// no validation rules for PaymentStatus

	// no validation rules for DepositeAccId

	// no validation rules for CustomerId

	// no validation rules for TotalAmount

	// no validation rules for CurrencyRef

	// no validation rules for CustomerStatus

	// no validation rules for SyncToken

	if v, ok := interface{}(m.GetCreateDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PrepaidAppointmentValidationError{
				field:  "CreateDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Metadata

	return nil
}

// PrepaidAppointmentValidationError is the validation error returned by
// PrepaidAppointment.Validate if the designated constraints aren't met.
type PrepaidAppointmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrepaidAppointmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrepaidAppointmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrepaidAppointmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrepaidAppointmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrepaidAppointmentValidationError) ErrorName() string {
	return "PrepaidAppointmentValidationError"
}

// Error satisfies the builtin error interface
func (e PrepaidAppointmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrepaidAppointment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrepaidAppointmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrepaidAppointmentValidationError{}

// Validate checks the field values on Customer with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Customer) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AppointyId

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Email

	// no validation rules for Gender

	// no validation rules for PhoneNumber

	// no validation rules for Acctnum

	// no validation rules for Accttype

	// no validation rules for VisState

	// no validation rules for CustomerOrg

	if v, ok := interface{}(m.GetCreateDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CustomerValidationError{
				field:  "CreateDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Metadata

	return nil
}

// CustomerValidationError is the validation error returned by
// Customer.Validate if the designated constraints aren't met.
type CustomerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomerValidationError) ErrorName() string { return "CustomerValidationError" }

// Error satisfies the builtin error interface
func (e CustomerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomerValidationError{}

// Validate checks the field values on Inventory with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Inventory) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for InventoryId

	// no validation rules for Name

	// no validation rules for ItemCost

	// no validation rules for PurchaseDetail

	// no validation rules for ItemDesc

	// no validation rules for ItemVisState

	// no validation rules for SyncToken

	// no validation rules for TxnId

	if v, ok := interface{}(m.GetPurchaseDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InventoryValidationError{
				field:  "PurchaseDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Metadata

	return nil
}

// InventoryValidationError is the validation error returned by
// Inventory.Validate if the designated constraints aren't met.
type InventoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InventoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InventoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InventoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InventoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InventoryValidationError) ErrorName() string { return "InventoryValidationError" }

// Error satisfies the builtin error interface
func (e InventoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInventory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InventoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InventoryValidationError{}
